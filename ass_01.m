
%%%%%%%%%%%%%%%%%%%%%%%
% image segmentation
%%%%%%%%%%%%%%%%%%%%%%%
for i = 1:2
    
    file_name = strcat('1/1_', int2str(i),'.pcd')
    pc_01 = pcread(file_name); %Reading the point-cloud
    
    img_01 = reshape(pc_01.Color,[640,480,3]); % reconstruct image
    loc_01 = reshape(pc_01.Location,[640,480,3]); % reconstruct location

    % create depth img
    loc_z = loc_01(:,:,3);

    % create mask from depth image
    mask_z = loc_z < 1.5; % create mask from depth
    mask_z = imerode(mask_z,strel('disk',2)); % perform erosion

    % create mask from rgb image
    [mask_rgb,maskedRGBImage] = createMask(img_01); % create mask from color

    % merge masks into one mask
    mask = mask_rgb & mask_z;
    mask = imclose(mask,strel('disk',3)); % perform dilation and erosion

    imshow(img_01.*uint8(mask)) % show rgb image segmentiert

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % apply mask on point cloud
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    temp = pc_01; % copy point cloud
    temp_loc = temp.Location;
    temp_col = temp.Color;
    mask_lin = find(mask==0); % find indices that are background
    temp_loc(mask_lin,:) = []; % threshold location
    temp_col(mask_lin,:) = []; % threshold color
    pc_seg = pointCloud(temp_loc, 'Color', temp_col); % save new point cloud
    
    file_name = strcat('1/1_', int2str(i),'seg.pcd')
    pcwrite(pc_seg , file_name); % write to file

    showPointCloud(pc_seg) % display point cloud

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% point cloud registration, transformation, merge
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% load filtered point cloud
pc_seg_01 = pcread('1/1_1seg.pcd'); %Reading the point-cloud
pc_seg_02 = pcread('1/1_2seg.pcd'); %Reading the point-cloud

% denoise cloud points
pc_seg_01 = pcdenoise(pc_seg_01);
pc_seg_02 = pcdenoise(pc_seg_02);

% point cloud registration
tform = pcregistericp(pc_seg_01,pc_seg_02,'Extrapolate',true);

% estimated transformation
pc_seg_02_align = pctransform(pc_seg_02,tform);

% merge points
mergeSize = 0.0015;
ptCloudScene = pcmerge(pc_seg_01, pc_seg_02_align, mergeSize);

function [BW,maskedRGBImage] = createMask(RGB)
%createMask  Threshold RGB image using auto-generated code from colorThresholder app.
%  [BW,MASKEDRGBIMAGE] = createMask(RGB) thresholds image RGB using
%  auto-generated code from the colorThresholder app. The colorspace and
%  range for each channel of the colorspace were set within the app. The
%  segmentation mask is returned in BW, and a composite of the mask and
%  original RGB images is returned in maskedRGBImage.

% Auto-generated by colorThresholder app on 11-Feb-2020
%------------------------------------------------------


% Convert RGB image to chosen color space
I = rgb2hsv(RGB);

% Define thresholds for channel 1 based on histogram settings
channel1Min = 0.877;
channel1Max = 0.041;

% Define thresholds for channel 2 based on histogram settings
channel2Min = 0.000;
channel2Max = 0.285;

% Define thresholds for channel 3 based on histogram settings
channel3Min = 0.432;
channel3Max = 1.000;

% Create mask based on chosen histogram thresholds
sliderBW = ( (I(:,:,1) >= channel1Min) | (I(:,:,1) <= channel1Max) ) & ...
    (I(:,:,2) >= channel2Min ) & (I(:,:,2) <= channel2Max) & ...
    (I(:,:,3) >= channel3Min ) & (I(:,:,3) <= channel3Max);
BW = sliderBW;

% Invert mask
BW = ~BW;

% Initialize output masked image based on input image.
maskedRGBImage = RGB;

% Set background pixels where BW is false to zero.
maskedRGBImage(repmat(~BW,[1 1 3])) = 0;

end